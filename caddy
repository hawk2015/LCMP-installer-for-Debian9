#!/bin/bash
#
# LCMP Installer for Debian9 x64
# reference: https://github.com/sayem314/Caddy-Web-Server-Installer
#
red=$(tput setaf 1)
blue=$(tput setaf 2)
yellow=$(tput setaf 3)
green=$(tput setaf 4)
purple=$(tput setaf 5)
normal=$(tput sgr0)


# Do not change any value after installation
caddypath="/usr/local/bin" # folder where caddyserver will be kept
caddywww="/var/www" # folder where public files should be
caddyssl="/etc/ssl/caddy"  # floder where acme file shoul be
caddyconf="/etc/caddy"
caddyfile="/etc/caddy/Caddyfile" # caddy web server configuration file
caddylog="/var/log/caddy" # folder where logs will be written
caddyuser="www-data" # user under caddy is gonna be running

phppath="/etc/php"
# Load and replace above variable if Caddy.conf exists
[[ -e /etc/Caddy.conf ]] && source /etc/Caddy.conf

# Global config
caddyname="Caddy Web Server"
# special version for me
versions="v0.1s"
bashname=$(basename "$0")
pids=$(pgrep -nf $caddypath/caddy)

# working directory
cd /opt || echo "Oops! /opt doesn't exist."

about () {
	echo ""
	echo "  ========================================================= "
	echo "  \           LCMP Installer for Debian9 x64               / "
	echo "  \                   $versions                            / "
	echo "  \          Linux:  Debian9 x64                           / "
	echo "  \          Caddy: Caddy web server v1.0.0                / "
	echo "  \          MariaDB : mysql branch                        / "
	echo "  \          Php : php7.3                                  / "
	echo "  ========================================================= "
	echo ""
}

howto () {
	echo "  Welcome!"
	echo "  run $yellow$bashname help $normal for help"
	echo ""
}

prms () {
	echo ""
	echo "  $bashname start          - Start $caddyname."
	echo "  $bashname stop           - Stop/Shutdown $caddyname."
	echo "  $bashname reload         - Reload $caddyname."
	echo "  $bashname restart        - Restart $caddyname."
	echo "  $bashname status         - Check $caddyname is running or not"; echo "                         or just run '$bashname'."
	echo "  $bashname install        - Install $caddyname on fresh OS."
	echo "  $bashname installphp     - Install $caddyname on fresh OS."
	echo "  $bashname edit1           - Edit Caddyfile using nano or default editor."
	echo "  $bashname edit2           - Edit caddy.service using nano or default editor."
	echo "  $bashname service        - Make $caddyname start on boot (upstart/systemd)."; echo "                         Not required because we install service on install."
	echo "  $bashname update         - Update $caddyname."
	echo "  $bashname delete         - Uninstall $caddyname and data."; echo "                         We would prompt you if you want to keep data."
	echo "  $bashname version        - Print version information."
	echo "  $bashname about          - About $caddyname Installer."
	echo ""
}

isinstalled () {
	# check if caddy is installed or return error code 1
	if [[ ! -x $caddypath/caddy ]]; then
		echo; echo "  Caddy is not installed.";
		echo "  run $yellow$bashname install$normal to install $caddyname";
		echo; return 1
	fi
}

startcaddy () {
	# exit if caddy is not installed
	isinstalled || exit 1

	# create process id folder if necessary
	caddypid="/var/run/caddy"
	if [[ ! -f $caddypid ]]; then
		mkdir -p $caddypid || (
		  echo "  error creating folder $caddypid"
		  echo "  try running with: sudo $bashname start"
			exit 1
		) || exit 1
		chown $caddyuser $caddypid
	fi

	# Detect if running or start
	pids=$(pgrep -nf $caddypath/caddy)
	if [ -z "$pids" ] ; then
		echo -n "  Starting $caddyname..."
		if [[ -e /etc/init/caddy.conf || -e /etc/systemd/system/caddy.service ]]; then
			# If service exist use service
			hash service 2>/dev/null && service caddy start || systemctl start caddy
		else
			sudo -H -u $caddyuser $caddypath/caddy -conf="$caddyfile" -quiet=true -pidfile=$caddypid/caddy.pid -agree &
		fi
		sleep 1
		echo "  [$blueDONE$normal]"

		sleep 1
		# restart or reload php for smooth environment
		hash php 2>/dev/null && restartphpfpm;
		pids=$(pgrep -nf $caddypath/caddy); caddystatus;
	else
		echo ""
		echo "  $caddyname is already $bluerunning$normal on: $pids (PID)"
		echo ""
	fi

	systemctl daemon-reload
	systemctl enable caddy
	systemctl start caddy
}

stopcaddy () {

	systemctl stop caddy

	pids=$(pgrep -nf $caddypath/caddy)
	if [ -z "$pids" ] ; then
		echo ""
		echo "  $caddyname is $redNOT running$normal"
		echo ""
	else
		secs=$(ps -p "$pids" -oetime= | tr '-' ':' | awk -F: '{ total=0; m=1; } { for (i=0; i < NF; i++) {total += $(NF-i)*m; m *= i >= 2 ? 24 : 60 }} {print total}')
		echo -n "  Shutting down $caddyname..."
		# Wait if Caddy uptime is less than 5 seconds
		if [[ $secs -lt 5 ]]; then
			sleep 4
		fi
		if [[ -e /etc/init/caddy.conf || -e /etc/systemd/system/caddy.service ]]; then
			# Most arch based linux don't have service
			hash service 2>/dev/null && service caddy stop || systemctl stop caddy
		else
			kill "$pids"
		fi
		sleep 1
		echo "  [$blueDONE$normal]"
	fi
	systemctl status caddy
}

reloadcaddy () {
	if [ -z "$pids" ] ; then
		echo ""
		echo "  $caddyname is $redNOT running$normal"
		echo "  run $yellow$bashname start$normal to start Caddy"
		echo ""
	else
		echo ""
		echo -n "  Reloading $caddyname..."
		if [[ -e /etc/init/caddy.conf || -e /etc/systemd/system/caddy.service ]]; then
			# Headless server should have service
			hash service 2>/dev/null && service caddy reload || systemctl reload caddy
		else
			kill -USR1 "$pids"
		fi
		sleep 2
		echo "  [$blueDONE$normal]"
		echo ""
		echo "  To restart, use $(tput setaf 6)$bashname restart$normal"
		echo "  Refresh your browser at least 3 times to take affect"
		echo ""
	fi
}

restartphpfpm () {
	phpvalue;
	# Ubuntu
	if [[ -e "$ubuntuphp5fpm" ]]; then
	service php5-fpm restart &>/dev/null

	# CentOS
	elif [[ -e "$centosphpfpm" || -e "$centosphpfpm2" ]]; then
	service php-fpm restart &>/dev/null

	# PHP 7
	elif [[ -e "$phpfpm7" ]]; then
	ervice php7.3-fpm restart &>/dev/null
	fi
}

caddystatus () {
	# Check if Caddy is installed or not
	isinstalled || exit 1

	# Detect Caddy process
	if [ -z "$pids" ] ; then
		echo ""
		echo "  $caddyname is $redNOT running$normal"
		echo ""
	else
		caddymemusage=$(ps axo rss,comm,pid | grep "$pids" | awk '{$1/=1024;printf "%.0fMB\t",$1}{print $2}' | awk '{print $1}')
		secs=$(ps -p "$pids" -oetime= | tr '-' ':' | awk -F: '{ total=0; m=1; } { for (i=0; i < NF; i++) {total += $(NF-i)*m; m *= i >= 2 ? 24 : 60 }} {print total}')
		if [[ $secs -lt 120 ]]; then
			caddyuptime="$secs seconds"
		elif [[ $secs -lt 3600 ]]; then
			caddyuptime=$(printf '%d minutes %d seconds\n' $(($secs%3600/60)) $(($secs%60)))
		elif [[ $secs -lt 86400 ]]; then
			caddyuptime=$(printf '%d hrs %d min %d sec\n' $(($secs/3600)) $(($secs%3600/60)) $(($secs%60)))
		else
			caddyuptime=$(echo $((secs/86400))" days, "$(date -d "1970-01-01 + $secs seconds" "+%H hrs %M min %S sec"))
		fi

		systemctl status caddy

		echo ""
		echo "  $caddyname is $bluerunning$normal"
		echo "  Caddy (PID: $pids) is using $caddymemusage RAM"
		echo "  System available RAM $(free -h | grep Mem: | awk '{print $7}')B"
		echo "  Uptime - $caddyuptime"
		echo ""
	fi
}

amiroot () {
	if [[ "$EUID" -ne 0 ]]; then
		echo "  Sorry, you need to run this as root"
		echo "  Try running with command 'sudo'"
		exit
	fi
}

getcaddy () {
	# Detect architecture. We only support linux.
	if uname -m | grep -q x86_64; then
		cpubits="amd64"
		cpubitsname="64bit..."
	elif uname -m | grep -q aarch64; then
		cpubits="arm64"
		cpubitsname="AArch64..."
	elif uname -m | grep -q 86; then
		cpubits="386"
		cpubitsname="32bit..."
	elif uname -m | grep -q armv5; then
		cpubits="arm5"
		cpubitsname="ARM 5..."
	elif uname -m | grep -q armv6l; then
		cpubits="arm6"
		cpubitsname="ARM 6..."
	elif uname -m | grep -q armv7l; then
		cpubits="arm7"
		cpubitsname="ARM 7..."
	else
		echo; echo "  unsupported or unknown architecture";
		echo; exit;
	fi

	# Downloading Caddy
	isupdate="$1"
	nocert="--no-check-certificate"
	if [[ $isupdate == "update" ]]; then
		caddyversion=$($caddypath/caddy -version | awk '{print}')
		echo ""; echo "  Found $caddyversion";
	fi

	# Check if plugin should be installed
	if [[ ! $plugin == "" ]]; then
		cpubits="$cpubits?plugins=$plugin&license=personal&telemetry=off"
		echo "  Downloading $caddyname with plugin ($plugin) for $cpubitsname" # Caddy linux
	else
		cpubits="$cpubits?license=personal&telemetry=off"
		echo "  Downloading $caddyname for $cpubitsname" # Caddy linux
	fi

	# Star downloading caddy now
	if ! wget -q $nocert "https://caddyserver.com/download/linux/$cpubits" -O "caddy_linux_custom.tar.gz" --show-progress; then
		echo "  [$redFAILED$normal]"
		echo ""
		echo "  Error: Cannot download Caddy binary!"
		echo "  https://caddyserver.com/download/linux/$cpubits"
		exit 1
	fi


	echo ""
}

installcaddy () {
	# Detetcting if Caddy is installed or not
	echo ""
	if [[ -e "$caddypath/caddy" ]]; then
		echo "  $caddyname is already installed on"
		echo "  $caddypath/caddy"
		echo; exit;
	fi

	# Download caddy
	getcaddy;

	# Extract Caddy to appropriate folder
	echo -n "  Extracting $caddyname to $caddypath..."
	if ! tar xzf caddy_linux_custom.tar.gz -C $caddypath; then
		echo "  [$redFAILED$normal]"
		echo ""
		echo "  Error: Cannot extract 'caddy_linux_custom.tar.gz'"
		echo "  Abort."
		exit 1
	fi
	echo " $blue[DONE]$normal"
	rm -f caddy_linux_custom.tar.gz # Deleting Caddy archive

	# put the caddy binary in the system wide binary directory and give it appropriate ownership and permissions:
	chown root:root $caddypath/caddy
	chmod 755 $caddypath/caddy

	# Creating non-root user
	if id -u $caddyuser >/dev/null 2>&1; then
		echo "  User '$caddyuser' already exists. Skipped!"
	else
		echo -n "  Creating user '$caddyuser'..."
		groupadd $caddyuser
		useradd -g $caddyuser --home-dir $caddywww --no-create-home --shell /usr/sbin/nologin --system $caddyuser &> /dev/null
		echo "  [$blueDONE$normal]"
  fi

	# Creating folders & files
	# reference official doc: https://github.com/mholt/caddy/issues/2209
	mkdir -p $caddypath
	mkdir -p $caddyssl
	mkdir -p $caddylog
	mkdir -p $caddyconf

	touch $caddylog/access.log
	touch $caddylog/error.log

	chown -R root:root /etc/caddy
	chown -R root:$caddyuser $caddyssl
	chmod 0770 $caddyssl

	chown -R $caddyuser:$caddyuser $caddylog
	chmod 555 $caddylog

	# Port setup
	echo -n "  Binding port using setcap..."
	if hash setcap 2>/dev/null; then
		setcap cap_net_bind_service=+ep $caddypath/caddy &>/dev/null && echo "  [$blueDONE$normal]" || echo "  [$redFAILED$normal]"
	elif hash apt-get 2>/dev/null; then
		apt-get install libcap2-bin -y &>/dev/null
		setcap cap_net_bind_service=+ep $caddypath/caddy &>/dev/null && echo "  [$blueDONE$normal]" || echo "  [$redFAILED$normal]"
	else
		echo "  [$redFAILED$normal]"
	fi

	# Show succes message
		echo ""
		echo "  Installed $caddyname to $caddypath"
		echo ""

}

updatecaddy () {
	# Detetcting Caddy installed or not
	isinstalled || exit 1

	echo;

	# Check if there is newer version available
	caddyversion=$($caddypath/caddy -version | awk '{print}' | sed 's/[^0-9]*//g' | sed 's/^0*//')
	CADDYV=$(wget -qO- https://api.github.com/repos/mholt/caddy/releases/latest | grep tag_name | sed 's/[^0-9]*//g' | sed 's/^0*//')
	if [[ ! $CADDYV -gt $caddyversion ]]; then
		echo "  Looks like you already have latest version installed."
		sleep 0.1
		echo "  Abort.";
		sleep 0.1
		exit;
	fi
  systemctl stop caddy

	# Download caddy
	getcaddy update;
	sleep 0.1

	# Stop current process if found
	if [ ! -z "$pids" ] ; then
		echo ""
		echo "  Found Caddy is running!"
		stopcaddy;
	fi
	# Delete Caddy folder
	echo -n "  Removing current $caddyname from $caddypath"
	sleep 0.2
	rm -rf "${caddypath:?}/"*
	echo "  [$blueDONE$normal]"
	sleep 0.1

	# Extract Caddy to appropriate folder
	echo -n "  Extracting $caddyname to $caddypath..."
	if ! tar xzf caddy_linux_custom.tar.gz -C $caddypath; then
		echo "  [$redFAILED$normal]"
		echo ""
		echo "  Error: Cannot extract 'caddy_linux_custom.tar.gz'"
		echo "  Abort."
		exit 1
	fi
	echo " $blue[DONE]$normal"

	# Granting owner access and required permission
	if id -u $caddyuser >/dev/null 2>&1; then
		chown -R $caddyuser $caddypath
	fi

	# Port setup
	hash setcap 2>/dev/null && setcap cap_net_bind_service=+ep $caddypath/caddy &>/dev/null

	# Removing caddy archive and printing info
	echo $(date +%s) > $caddypath/update.check
	rm -f caddy_linux_custom.tar.gz # Deleting Caddy archive
	caddyversion=$($caddypath/caddy -version | awk '{print}')
	echo; echo "  Updated to $caddyversion"; echo;
}

installphp () {
	if [[ -e "$phppath" ]] ; then
			  echo "PHP was installed!"
	  else
				# Install PHP
			if hash yum 2>/dev/null; then
					yum update -y &>/dev/null && yum install sed php-fpm php-cli php-curl curl sudo -y &>/dev/null
					echo "  [$blueDONE$normal]"
					echo "  Installed 'php-fpm php-cli php-curl curl sudo'"

	 		elif hash apt-get 2>/dev/null; then
	        apt install ca-certificates apt-transport-https -y
				wget -q https://packages.sury.org/php/apt.gpg -O- | apt-key add -
	      echo "deb https://packages.sury.org/php/ stretch main" | tee /etc/apt/sources.list.d/php.list
					echo ""
					apt update
					apt install php7.3-fpm -y
					apt install php7.3 php7.3-mysql php7.3-gd php7.3-xml php7.3-cgi php7.3-cli php7.3-curl php7.3-zip php7.3-mbstring unzip -y
					echo ""
					# enable service startup and run
					systemctl enable php7.3-fpm
					systemctl start php7.3-fpm

					echo " PHP installation was[$blueDONE$normal]"
     fi
	 fi
}

phpvalue () {
	ubuntuphp5fpm="/etc/php5/fpm/pool.d/www.conf"
	centosphpfpm="/etc/php/fpm/pool.d/www.conf"
	centosphpfpm2="/etc/php-fpm.d/www.conf"
	phpfpm7="/etc/php/7.3/fpm/pool.d/www.conf"
}

caddyfile () {
  # php FastCGI configuration
  phpsock=127.0.0.1:9000
	# Check if Caddyfile exist
	# Generate Caddyfile
	if [[ ! -e $caddyfile ]]; then
		echo ""
		echo "  Enter your domain name"
		echo "  Seperated by comma"
		read -r -p "  Domain name: " domainname
		echo ""

		# Check if gonna run locally
		if [[ $domainname == "localhost" || $domainname == "localhost:*" || $domainname == "127.0.0*" || $domainname == "192.168*" ]]; then
			echo "  SSL is disabled on non-production server."

			 # if Enabling the DNS Challenge, need cloudflare Email & Global API Key
		 elif [[ "$(echo $plugin | grep "tls.dns.cloudflare")" != "" ]]; then
					echo "  Enter your $yellowCloudflare Email$normal for enabling the DNS Challenge"
					read -r -p "  Email: " domainmail
						until [[ "$domainmail" == *@*.* || "$domainmail" == off ]]; do
							echo ""
							echo "  Invalid email"
							echo "  Type $yellowoff$normal if you don't want https"
							read -r -p "  Email: " domainmail
						done
						echo ""
 "$(echo $plugin | grep "tls.dns.cloudflare")" != ""


						echo "  Enter $yellowCloudflare Global API Key$normal for enabling the DNS Challenge"
						read -r -p "  Global API Key: " domainkey
					  echo ""
				else
					echo "  Enter your email for automated ssl"
					read -r -p "  Email: " domainmail
						until [[ "$domainmail" == *@*.* || "$domainmail" == off ]]; do
					echo ""
					echo "  Invalid email"
					echo "  Type $yellowoff$normal if you don't want https"
						read -r -p "  Email: " domainmail

					done
				fi
		echo "$domainname {
	root $caddywww
	gzip
	tls $domainmail
	log $caddylog/access.log
	errors $caddylog/error.log
	fastcgi / $phpsock php
	}
	" >> $caddyfile

   # if insatall plugin:tls.dns.cloudflare, modify Caddyfile
		if [[ $plugin == "tls.dns.cloudflare" ]]; then
			echo "$domainname {
		root $caddywww
		gzip
		tls $domainmail
		tls {
			dns cloudflare
		}
		log $caddylog/access.log
		errors $caddylog/error.log
		fastcgi / $phpsock php
		}
		" >> $caddyfile

		echo "  DNS challenge by $plugin ! "
	  fi

		# reference official doc: https://github.com/mholt/caddy/issues/2209
		chown root:root $caddyfile
		chmod 644 $caddyfile

		echo ""
		echo "  $caddyfile created"
else
		echo "  $caddyfile found. Skipped! "
fi

	# Check if caddywww exist and setup
	if [[ ! -e $caddywww ]]; then
		mkdir -p $caddywww
	fi
	# reference official doc: https://github.com/mholt/caddy/issues/2209
	chown $caddyuser:$caddyuser $caddywww
	chmod 555 $caddywww

	# Generate example html
	# shellcheck disable=SC1078,SC1079,SC2140
	if [[ ! -e $caddywww/index.html ]]; then
		echo "<TITLE>Caddy Default Page</TITLE>

<h1><font color="green">It works!</font></h1>

<h3><font color="grey">This is the default welcome page used to test the correct operation of the Caddy web server after installation via Caddy Web Server Installer.</font></h3>

<h3><font color="grey">If you can read this page, it means that the Caddy web server installed at this site is working properly.<br>
You should <font color="#D03C3C">replace this file</font>
(located at <tt>$caddywww/index.html</tt>) before continuing to operate your server.</font></h3>
</hr>
<h3><font color="grey">If you are a normal user of this web site and don't know what this page is about, this probably means that the site is currently unavailable due to maintenance.</font></h3>" >> $caddywww/index.html
		echo "  index file created"
		echo "  $caddywww/index.html"
	else
		echo "  index.html found. Skipped!"
	fi

	# phpinfo
	if [[ ! -e $caddywww/info.php ]]; then
		echo "<?php phpinfo(); ?>" >> $caddywww/info.php
		echo ""
		echo "  PHP-info file created"
		echo "  $caddywww/info.php"
	fi

	chown -R $caddyuser $caddywww

	echo ""
	echo "  Done. Caddy has been installed :)"
	echo "  Run $yellow$bashname start$normal to start $caddyname"
	echo ""

}

makeservice () {
if [ -e /etc/systemd/system/caddy.service ]; then
	echo "  Service already exists. Skipped!"
else
	nocert="--no-check-certificate"
	init=$(cat /proc/1/comm)
	echo -n "  Creating startup service..."
	if [ "$init" == 'systemd' ]; then
		MAIN="$"
		MAINPID="MAINPID"
		rm -f /etc/systemd/system/caddy.service

    # get caddy.Service file from caddy official website
		wget -q -P /etc/systemd/system/ https://raw.githubusercontent.com/mholt/caddy/master/dist/init/linux-systemd/caddy.service

		# if Enabling the DNS Challenge, need cloudflare Email & Global API Key
		if [[ $plugin == "tls.dns.cloudflare" ]]; then
		domainmail="Environment=CLOUDFLARE_EMAIL="${domainmail}
		domainkey="Environment=CLOUDFLARE_API_KEY="${domainkey}
		sed -i "9i${domainmail}" /etc/systemd/system/caddy.service
		sed -i "10i${domainkey}" /etc/systemd/system/caddy.service
	  fi

		chmod 644 /etc/systemd/system/caddy.service
		echo "  $blueDONE$normal"
		echo ""
	fi
fi
}

deletecaddy () {
	if [[ -e  "$caddypath" ]] ; then
		echo ""
		echo "  Are you sure you want to uninstall Caddy web server? [y/N]"
		read -r -p "  Select an option: " option
		case $option in
		[yY][eE][sS]|[yY])
			# Stop caddy if running
			if [ ! -z "$pids" ] ; then
				echo "  Found Caddy is running!"
				stopcaddy;
				sleep 2
			fi
			sleep 1

			# Disable and remove startup script if exist
			removeservice;

			# Remove Caddy bin file , usually on /usr/local/bin.
			rm -f $caddypath/caddy &>/dev/null

			# Backup Caddyfile if exists, usually on /etc/caddy/Caddyfile.
			if [[ -e $caddyfile ]]; then
				cp $caddyfile $caddyfile.bak
				echo "  Backup of current Caddyfile saved to $caddyfile.bak"
			fi

			# Now remove Caddyfile
			rm -f $caddyfile &>/dev/null

			# Remove ssl floder
			rm -rf $caddyssl &>/dev/null

			# Remove log floder
			rm -rf $caddylog &>/dev/null

			# Prompt if data should be removed
			if [[ -d  "$caddywww" ]]; then
				echo "  $caddyname has been deleted."
				deletecaddydata;
			else
				# remove caddy user
				if [[ ! $caddyuser == $(whoami) ]]; then
						userdel $caddyuser # delete caddy user
						echo "  $caddyname and Caddy user '$caddyuser' has been deleted."
				fi
			fi
			echo ""
			exit
			;;
		[nN][oO]|[nN])
			echo "  Abort."
			exit;
			;;
		*) echo ""; echo "  Incorrect input, exiting! "; exit;;
		esac
	else
		echo ""
		echo "  Looks like Caddy is not installed!"
	fi
	echo ""
}

removeservice () {
	# Disable and remove startup script if exist
	if [ -e /etc/systemd/system/caddy.service ]; then
		init=$(cat /proc/1/comm)
		echo -n "  Removing startup service..."
		if [ "$init" == 'systemd' ]; then
			systemctl disable caddy &>/dev/null
			rm -f /etc/systemd/system/caddy.service &>/dev/null
		fi
		echo "  [$blueDONE$normal]"
	fi
}

deletecaddydata () {
	totalsize=$(du -sh $caddywww)
	totalfiles=$(find $caddywww -type f | wc -l)
	echo ""
	echo "  Would you also like to delete data?"
	echo "  Size: $totalsize (Files: $totalfiles)"
	read -r -p "  Select an option [y/N]: " option
	echo ""
	case $option in
	[yY][eE][sS]|[yY])
		echo -n "  Deleting $caddywww (data)..."
		sleep 2
		rm -rf $caddywww # deleting caddy html folder
		echo "  [$blueDONE$normal]"
		# remove caddy user too if exists
		if [[ ! $caddyuser == $(whoami) ]]; then
				userdel $caddyuser # delete caddy user
				echo "  Caddy user '$caddyuser' has been deleted too."
		fi
		;;
	*)
		echo "  Removing $caddywww (data)... [$purpleSkipped$normal]"
		;;
	esac
}

versioninfo () {
	echo ""
	if [[ -e $caddypath/caddy ]]; then
		caddyversion=$($caddypath/caddy -version | awk '{print $2}')
		echo "  $caddyname $caddyversion"
	else
		echo "  $caddyname is not installed."
	fi
	echo "  Caddy Web Server Installer - $cwsiv"
	if hash php 2>/dev/null; then
		echo "  $(php -v | grep cli)"
	fi
	echo ""
}

# Edit Caddyfile using nano or default editor
editcaddyfile (){
	if hash nano 2>/dev/null; then
		echo " opening $caddyfile using nano"
		nano $caddyfile
	elif hash editor 2>/dev/null; then
		editor $caddyfile
	else
		echo "  error: please manually edit files"
		echo "  $caddyfile"
 	fi
}

# Edit caseaddy.service using nano or default editor
editcaddyservice (){
	if hash nano 2>/dev/null; then
		echo " opening $caddyfile using nano"
		nano /etc/systemd/system/caddy.service

	elif hash editor 2>/dev/null; then
		editor /etc/systemd/system/caddy.service

	else
		echo "  error: please manually edit files"
		echo "  /etc/systemd/system/caddy.service"
 	fi
}


checkforupdate () {
	# Check if there is newer version available
	# Currenly only check caddyserver not this script
	caddyversion=$($caddypath/caddy -version | awk '{print}' | sed 's/[^0-9]*//g' | sed 's/^0*//')
	CADDYV=$(wget -qO- https://api.github.com/repos/mholt/caddy/releases/latest | grep tag_name | sed 's/[^0-9]*//g' | sed 's/^0*//')
	if [[ $CADDYV -gt $caddyversion ]]; then
		echo ""
		echo "  $redNOTICE:$normal"
		echo "  There is an update available of $caddyname"
		echo "  run $yellow$bashname update$normal to update"
		echo ""
	else
		[[ $CADDYV == "" ]] || echo $(date +%s) > $caddypath/update.check || echo $(date +%s) | sudo tee $caddypath/update.check
	fi
}

backupcaddy () {
	backupname="caddybackup-$(date +"%Y%m%d%H%M").tar.gz"
	echo "  Please wait! Creating backup $backupname"
	echo "  $(du -sh $caddypath)"
	echo "  $(du -sh $caddyfile)"
	tar -czf "$backupname" $caddypath $caddyfile --absolute-names || ( echo "  error creating backup $backupname"
		echo "  Abort."
		rm -f "$backupname"; exit )
	echo "  Backup finished."
	echo "  $(du -sh "$backupname")"
	exit
}

restorecaddy () {
	if [[ ! -x $caddypath/caddy ]]; then
		echo "  $redWARN:$normal"
		echo "  Caddy is not installed."
		echo "  It is recommended to install Caddy before restoring."
		read -r -p "  Press enter to continue anyway!"
	fi
	echo -n "  Please provide backup name: "
	read -r -t 15 backupname || exit
	echo "  Please wait! restoring backup $backupname"
	if [[ -e $backupname ]]; then
		echo "  $(du -sh "$backupname")"
		tar -xzf "$backupname" --absolute-names || ( echo "  error restoring backup $backupname"
		echo "  Abort."; exit )
		echo "  Restore finished."
	else
		echo "  $backupname not found on $(pwd)"
		echo "  Abort."
	fi
	exit
}

# See how we were called.
case $1 in
	'-start'|'--start'|'start'|'startcaddy' )
		startcaddy;;
	'-stop'|'--stop'|'stop'|'stopcaddy' )
		stopcaddy;;
	'-reload'|'--reload'|'reload'|'reloadcaddy' )
		reloadcaddy;;
	'-restart'|'--restart'|'restart' )
		stopcaddy; sleep 2; startcaddy;;
	'-status'|'--status'|'status'|'caddystatus' )
		caddystatus;;
	'-install'|'--install'|'install' )
		amiroot; plugin="$2"; installcaddy; caddyfile; makeservice;;
	'-update'|'--update'|'update'|'updatecaddy' )
		amiroot; plugin="$2"; updatecaddy; caddyfile;;
	'-installphp'|'--installphp'|'installphp' )
		amiroot; installphp;;

	'-edit1'|'edit1'|'editcaddyfile' )
		amiroot; editcaddyfile;;
	'-edit2'|'edit2'|'editcaddyservice' )
		amiroot; editcaddyservice;;

	'-service'|'--service'|'service'|'makeservice' )
		amiroot; makeservice;;
	'-del'|'delete'|'--delete'|'-rm'|'deletecaddy' )
		amiroot; deletecaddy;;
	'delete-service'|'--delete-service'|'remove-startup'|'--remove-startup' )
		amiroot; removeservice;;
	'-backup'|'--backup'|'backup' )
		backupcaddy;;
	'-restore'|'--restore'|'restore' )
		restorecaddy;;
	'-about'|'about'|'--about' )
		about;;
	'-h'|'help'|'-help'|'--help' )
		prms;;
	'-v'|'version'|'-version'|'--version'|'versioninfo'|'-V' )
		versioninfo;;
	*)
		caddystatus; howto;;
esac

# check updates every 72hrs
if [[ -e "$caddypath/caddy" ]]; then
	# Create update.check file if not exist
	if [[ ! -e $caddypath/update.check ]]; then
		echo $(date +%s) > $caddypath/update.check
		chmod 777 $caddypath/update.check
	elif [[ -e $caddypath/update.check  ]]; then
		currentdays="$(date +%s)"
		lastcheckdays=$(cat $caddypath/update.check)
		updatedays="$(($currentdays - $lastcheckdays))"
		# if more than 72hrs execute update check
		if [[ $updatedays -gt 259200 ]]; then
			checkforupdate;
		fi
	fi
fi

# exit now!
exit 0
